// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DKVClient is the client API for DKV service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DKVClient interface {
	KVGet(ctx context.Context, in *KVGetRequest, opts ...grpc.CallOption) (*KVGetResponse, error)
	KVPut(ctx context.Context, in *KVPutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	KVDelete(ctx context.Context, in *KVDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RaftJoin(ctx context.Context, in *RaftJoinRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RaftLeave(ctx context.Context, in *RaftLeaveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RaftStatus(ctx context.Context, in *RaftStatusRequest, opts ...grpc.CallOption) (*RaftStatusResponse, error)
}

type dKVClient struct {
	cc grpc.ClientConnInterface
}

func NewDKVClient(cc grpc.ClientConnInterface) DKVClient {
	return &dKVClient{cc}
}

func (c *dKVClient) KVGet(ctx context.Context, in *KVGetRequest, opts ...grpc.CallOption) (*KVGetResponse, error) {
	out := new(KVGetResponse)
	err := c.cc.Invoke(ctx, "/proto.DKV/KVGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dKVClient) KVPut(ctx context.Context, in *KVPutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.DKV/KVPut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dKVClient) KVDelete(ctx context.Context, in *KVDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.DKV/KVDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dKVClient) RaftJoin(ctx context.Context, in *RaftJoinRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.DKV/RaftJoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dKVClient) RaftLeave(ctx context.Context, in *RaftLeaveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.DKV/RaftLeave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dKVClient) RaftStatus(ctx context.Context, in *RaftStatusRequest, opts ...grpc.CallOption) (*RaftStatusResponse, error) {
	out := new(RaftStatusResponse)
	err := c.cc.Invoke(ctx, "/proto.DKV/RaftStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DKVServer is the server API for DKV service.
// All implementations must embed UnimplementedDKVServer
// for forward compatibility
type DKVServer interface {
	KVGet(context.Context, *KVGetRequest) (*KVGetResponse, error)
	KVPut(context.Context, *KVPutRequest) (*emptypb.Empty, error)
	KVDelete(context.Context, *KVDeleteRequest) (*emptypb.Empty, error)
	RaftJoin(context.Context, *RaftJoinRequest) (*emptypb.Empty, error)
	RaftLeave(context.Context, *RaftLeaveRequest) (*emptypb.Empty, error)
	RaftStatus(context.Context, *RaftStatusRequest) (*RaftStatusResponse, error)
	mustEmbedUnimplementedDKVServer()
}

// UnimplementedDKVServer must be embedded to have forward compatible implementations.
type UnimplementedDKVServer struct {
}

func (UnimplementedDKVServer) KVGet(context.Context, *KVGetRequest) (*KVGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KVGet not implemented")
}
func (UnimplementedDKVServer) KVPut(context.Context, *KVPutRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KVPut not implemented")
}
func (UnimplementedDKVServer) KVDelete(context.Context, *KVDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KVDelete not implemented")
}
func (UnimplementedDKVServer) RaftJoin(context.Context, *RaftJoinRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaftJoin not implemented")
}
func (UnimplementedDKVServer) RaftLeave(context.Context, *RaftLeaveRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaftLeave not implemented")
}
func (UnimplementedDKVServer) RaftStatus(context.Context, *RaftStatusRequest) (*RaftStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaftStatus not implemented")
}
func (UnimplementedDKVServer) mustEmbedUnimplementedDKVServer() {}

// UnsafeDKVServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DKVServer will
// result in compilation errors.
type UnsafeDKVServer interface {
	mustEmbedUnimplementedDKVServer()
}

func RegisterDKVServer(s grpc.ServiceRegistrar, srv DKVServer) {
	s.RegisterService(&DKV_ServiceDesc, srv)
}

func _DKV_KVGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKVServer).KVGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DKV/KVGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKVServer).KVGet(ctx, req.(*KVGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DKV_KVPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVPutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKVServer).KVPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DKV/KVPut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKVServer).KVPut(ctx, req.(*KVPutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DKV_KVDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKVServer).KVDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DKV/KVDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKVServer).KVDelete(ctx, req.(*KVDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DKV_RaftJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftJoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKVServer).RaftJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DKV/RaftJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKVServer).RaftJoin(ctx, req.(*RaftJoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DKV_RaftLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftLeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKVServer).RaftLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DKV/RaftLeave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKVServer).RaftLeave(ctx, req.(*RaftLeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DKV_RaftStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKVServer).RaftStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DKV/RaftStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKVServer).RaftStatus(ctx, req.(*RaftStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DKV_ServiceDesc is the grpc.ServiceDesc for DKV service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DKV_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DKV",
	HandlerType: (*DKVServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KVGet",
			Handler:    _DKV_KVGet_Handler,
		},
		{
			MethodName: "KVPut",
			Handler:    _DKV_KVPut_Handler,
		},
		{
			MethodName: "KVDelete",
			Handler:    _DKV_KVDelete_Handler,
		},
		{
			MethodName: "RaftJoin",
			Handler:    _DKV_RaftJoin_Handler,
		},
		{
			MethodName: "RaftLeave",
			Handler:    _DKV_RaftLeave_Handler,
		},
		{
			MethodName: "RaftStatus",
			Handler:    _DKV_RaftStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dkv.proto",
}
